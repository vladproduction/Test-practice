<dependencies>
    <!-- Other dependencies -->

    <!-- Spring Boot Starter Test -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
        <exclusions>
            <exclusion>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
    
    <!-- JUnit Jupiter API for JUnit 5 -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.1</version> <!-- Use the latest stable version -->
        <scope>test</scope>
    </dependency>
    
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.1</version> <!-- Use the latest stable version -->
        <scope>test</scope>
    </dependency>
</dependencies>

1) Why do we add exclusions?
When you include the Spring Boot Starter Test dependency, it automatically brings in some other test-related libraries,
including JUnit 4 by default. This is because older versions of Spring Boot used JUnit 4 as the default testing framework.
The exclusion is added to prevent JUnit 4 from being included with your project when you prefer to use JUnit 5.

By excluding JUnit 4, you ensure that:

There are no conflicts between JUnit 4 and JUnit 5 if you decide to use both in the same project.
Your test classes won't accidentally be running under JUnit 4's test runner, which doesn't support JUnit 5 features.

2) Doesn’t the starter already have JUnit 5?
Yes, starting from Spring Boot 2.2, the Spring Boot Starter Test includes JUnit 5 (JUnit Jupiter) by default. However,
older versions of Spring Boot started with JUnit 4, making the transition to JUnit 5 not automatic.

If you are using Spring Boot 2.2 or later, you likely don’t need to manually add JUnit 5 dependencies unless you want to
use specific versions or set them up differently. The inclusion of these dependencies in your pom.xml or build.gradle
file is not always necessary since just having spring-boot-starter-test will suffice by itself in the later versions.

/////////////////
Spring Boot that supports JUnit 5 (2.2 or newer), pom.xml could be simplified as follows:
<dependencies>
    <!-- Other dependencies -->

    <!-- Spring Boot Starter Test, which includes JUnit 5 -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>